/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiMembersGet$Json } from '../fn/members/api-members-get-json';
import { ApiMembersGet$Json$Params } from '../fn/members/api-members-get-json';
import { apiMembersGet$Plain } from '../fn/members/api-members-get-plain';
import { ApiMembersGet$Plain$Params } from '../fn/members/api-members-get-plain';
import { apiMembersIdDelete } from '../fn/members/api-members-id-delete';
import { ApiMembersIdDelete$Params } from '../fn/members/api-members-id-delete';
import { apiMembersIdGet$Json } from '../fn/members/api-members-id-get-json';
import { ApiMembersIdGet$Json$Params } from '../fn/members/api-members-id-get-json';
import { apiMembersIdGet$Plain } from '../fn/members/api-members-id-get-plain';
import { ApiMembersIdGet$Plain$Params } from '../fn/members/api-members-id-get-plain';
import { apiMembersIdPut } from '../fn/members/api-members-id-put';
import { ApiMembersIdPut$Params } from '../fn/members/api-members-id-put';
import { apiMembersPost$Json } from '../fn/members/api-members-post-json';
import { ApiMembersPost$Json$Params } from '../fn/members/api-members-post-json';
import { apiMembersPost$Plain } from '../fn/members/api-members-post-plain';
import { ApiMembersPost$Plain$Params } from '../fn/members/api-members-post-plain';
import { MemberDto } from '../models/member-dto';

@Injectable({ providedIn: 'root' })
export class MembersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiMembersGet()` */
  static readonly ApiMembersGetPath = '/api/Members';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersGet$Plain$Response(params?: ApiMembersGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MemberDto>>> {
    return apiMembersGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersGet$Plain(params?: ApiMembersGet$Plain$Params, context?: HttpContext): Observable<Array<MemberDto>> {
    return this.apiMembersGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MemberDto>>): Array<MemberDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersGet$Json$Response(params?: ApiMembersGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MemberDto>>> {
    return apiMembersGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersGet$Json(params?: ApiMembersGet$Json$Params, context?: HttpContext): Observable<Array<MemberDto>> {
    return this.apiMembersGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MemberDto>>): Array<MemberDto> => r.body)
    );
  }

  /** Path part for operation `apiMembersPost()` */
  static readonly ApiMembersPostPath = '/api/Members';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMembersPost$Plain$Response(params?: ApiMembersPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MemberDto>> {
    return apiMembersPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMembersPost$Plain(params?: ApiMembersPost$Plain$Params, context?: HttpContext): Observable<MemberDto> {
    return this.apiMembersPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MemberDto>): MemberDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMembersPost$Json$Response(params?: ApiMembersPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MemberDto>> {
    return apiMembersPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMembersPost$Json(params?: ApiMembersPost$Json$Params, context?: HttpContext): Observable<MemberDto> {
    return this.apiMembersPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MemberDto>): MemberDto => r.body)
    );
  }

  /** Path part for operation `apiMembersIdGet()` */
  static readonly ApiMembersIdGetPath = '/api/Members/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersIdGet$Plain$Response(params: ApiMembersIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MemberDto>> {
    return apiMembersIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersIdGet$Plain(params: ApiMembersIdGet$Plain$Params, context?: HttpContext): Observable<MemberDto> {
    return this.apiMembersIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MemberDto>): MemberDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersIdGet$Json$Response(params: ApiMembersIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MemberDto>> {
    return apiMembersIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersIdGet$Json(params: ApiMembersIdGet$Json$Params, context?: HttpContext): Observable<MemberDto> {
    return this.apiMembersIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MemberDto>): MemberDto => r.body)
    );
  }

  /** Path part for operation `apiMembersIdPut()` */
  static readonly ApiMembersIdPutPath = '/api/Members/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMembersIdPut$Response(params: ApiMembersIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiMembersIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMembersIdPut(params: ApiMembersIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiMembersIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiMembersIdDelete()` */
  static readonly ApiMembersIdDeletePath = '/api/Members/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMembersIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersIdDelete$Response(params: ApiMembersIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiMembersIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMembersIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMembersIdDelete(params: ApiMembersIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiMembersIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
